# commitmessage.conf
# commitmessage Version 2.0
# Copyright 2002-2004 Stephen Haberman


#####################################################################
#
# 1. Setup the controller to pull information from either the CVS or
# SVN source code management system on each commit

[scm]
controller = commitmessage.controllers.svn.SvnController

# Or:
# controller = commitmessage.controllers.cvs.CvsController


# 1b. Advanced controller setup - skip if you're just getting started
#
# addRepoPrefix = no (default)
# - Means CVS modules and Subversion repo names will be prepended to
# /all/ the directory names in a commit
#
# matchWithRepoPrefix = yes (default)
# - Means CVS modules and Subversion repo names will be used in module
# matching down below in the [modules] section
#
# summaryThreshold = 32 (no default)
# - Means that diffs will not be processed for commits that exceed 32 KB.
# Though the value is given in KB, the parameter can hold an arbitrarily large
# value (well in excess of 2 TB). Note that if summaryThreshold is not defined,
# commitmessage will always attempt to generate a full diff summary for _every_
# commit.



#####################################################################
#
# 2. Setup modules
#
# These are not modules in the CVS sense, in commitmessage a 'module'
# is just a group of Views that all should be executed together.
#
# We give a module a name, e.g. 'all' or 'myproject', and then a
# regular expression to filter only those commits you are interested
# in.
#
# This regular expression filter is matched against the commit's
# greatest common directory, it's 'root' directory. For example, if
# /dir/foo/bar/x.java and /dir/foo/blah/y.java were in the same
# commit, /dir/foo is the greatest common directory.
#
# So, commitmessage will execute each module (each group of Views)
# that has its regular expression filter match the greatest common
# directory of the current commit.
#
# There are two predefined modules made available: UNIVERSAL_MODULE 
# and DEFAULT_MODULE. These names are reserved and should not be 
# used as user-defined module names.

[modules]
mysvnrepo = /mysvnrepo/
mycvsmodule = /mycvsmodule/



#####################################################################
#
# 3. Setup the views
#
# Views are SCM-agnostic actions that take commitmessage's generic
# object model and do something, e.g. sending an email.
#
# Views are created by declaring global instances of View classes, as
# below.
#
# Note that all View instances are global and not per-module. Though
# later we can give them per-module settings.

[views]
email = commitmessage.views.email.TigrisStyleEmailView

aim = commitmessage.views.im.AIMView
msn = commitmessage.views.im.MSNView

# If you want to use the AIMView, download "toc.py" from [1]
# and place it in the same directory as main.py.
#
# If you want to use MSNView, download msnp from [2] and
# place the msnp package in the same directory as main.py.
#
# [1] http://www.jamwt.com/Py-TOC/
# [2] http://msnp.sourceforge.net/



#####################################################################
#
# 4. Configure default View settings.
#
# Each View instance is global, so [viewInstanceName] sections allow global
# configuration. These global settings can later be overriden by module-specific
# settings.

[email]
server = mail.example.com
from = $model.user@example.com
subject = commit $model.rev: $model.greatestCommonDirectory()

# Advanced - if you use the [userMap] section, see towards the end,
# you can get addresses that are not just scm-username@example.com by
# doing:
# from = $userMap.get(model.user)



#####################################################################
#
# 5. For each module, [moduleName] sections declare the View instances
# each module uses and applies any module-specific settings.
#
# As mentioned above, there are two pre-defined modules that you may 
# optionally use: 
#
# [DEFAULT_MODULE] - If defined, the DEFAULT_MODULE will be executed
# when there is no user-defined module that matches the commit.
#
# [UNIVERSAL_MODULE] - If defined, the UNIVERSAL_MODULE will always
# be executed without regard to any other module matches.
#
# A few examples:
#
# 1. A commit comes in that matches a user-defined module, and both 
#    DEFAULT_MODULE and UNIVERSAL_MODULE are defined. In this case, 
#    only the user-defined module and UNIVERSAL_MODULE will execute.
#
# 2. A commit comes in that matches a user-defined module, 
#    and DEFAULT_MODULE is defined, but UNIVERSAL_MODULE is not. 
#    In this case, only the user-defined module will execute.
#
# 3. A commit comes in that does not match any user-defined module, 
#    and both DEFAULT_MODULE and UNIVERSAL_MODULE are defined. In 
#    this case, both DEFAULT_MODULE and UNIVERSAL_MODULE will execute.
#
# 4. A commit comes in that does not match any user-defined module, 
#    and DEFAULT_MODULE is defined, but UNIVERSAL_MODULE is not. 
#    In this case, only DEFAULT_MODULE will execute.
#

[DEFAULT_MODULE]
views = email, aim, msn
email.to = list@example.com, person@example.com

aim.screenname =
aim.password =
aim.to =

msn.passport =
msn.password =
msn.to =

# The following [mysvnrepo] section overrides the DEFAULT_MODULE to:
# - Only use the email view, the aim/msn views will not be executed
# - Email to just svnlist@example.com, the DEFAULT_MODULE email.to will
#   not be used

[mysvnrepo]
views = email
email.to = svnlist@example.com



#####################################################################
#
# Misc
#
# The userMap section maps CVS/SVN usernames to email addresses from
# use in the from field of commit emails. For example,
#

[userMap]
mysvnusername = me@example.com
yoursvnusername = you@yourexample.com
