# commitmessage.conf
# commitmessage Version 2.0-beta-4
# Copyright 2002, 2003 Stephen Haberman


#####################################################################
#
# 1. Setup the controller to pull information from either the CVS or
# SVN source code management system on each commit

[scm]
controller = commitmessage.controllers.svn.SvnController

# Or:
# controller = commitmessage.controllers.cvs.CvsController


# 1b. Advanced controller setup - skip if you're just getting started
#
# addRepoPrefix = no (default)
# - Means CVS modules and Subversion repo names will be prepended to
# /all/ the directory names in a commit
#
# matchWithRepoPrefix = yes (default)
# - Means CVS modules and Subversion repo names will be used in module
# matching down below in the [modules] section




#####################################################################
#
# 2. Setup modules
#
# These are not modules in the CVS sense, in commitmessage a 'module'
# is just a group of Views that all should be executed together.
#
# We give a module a name, e.g. 'all' or 'myproject', and then a
# regular expression to filter only those commits you are interested
# in.
#
# This regular expression filter is matched against the commit's
# greatest common directory, it's 'root' directory. For example, if
# /dir/foo/bar/x.java and /dir/foo/blah/y.java were in the same
# commit, /dir/foo is the greatest common directory.
#
# So, commitmessage will execute each module (each group of Views)
# that has its regular expression filter match the greatest common
# directory of the current commit.
#
# The default module defined below, 'all', matches all commits.

[modules]
all = ^/
mysvnrepo = ^/mysvnrepo/*
mycvsmodule = ^/mycvsmodule/*



#####################################################################
#
# 3. Setup the views
#
# Views are SCM-agnostic actions that take commitmessage's generic
# object model and do something, e.g. sending an email.
#
# Views are created by declaring global instances of View classes, as
# below.
#
# Note that all View instances are global and not per-module. Though
# later we can give them per-module settings.

[views]
email = commitmessage.views.email.TigrisStyleEmailView
aim = commitmessage.views.im.AIMView
msn = commitmessage.views.im.MSNView



#####################################################################
#
# 4. Configure default View settings.
#
# Each View instance is global, so [viewInstanceName] sections allow global
# configuration. These global settings can later be overriden by module-specific
# settings.

[email]
server = mail.example.com
from = $model.user@example.com
subject = commit $model.rev: $model.greatestCommonDirectory()

# Advanced - if you use the [userMap] section, see towards the end,
# you can get addresses that are not just scm-username@example.com by
# doing:
# from = $userMap.get(model.user)



#####################################################################
#
# 5. For each module, [moduleName] sections declare the View instances
# each module uses and applies any module-specific settings.
#
# Note that in this example, we are setting the email.to property
# within the all module. This is to show how, if there were more
# modules (e.g. project1, project2, etc.), that you could setup one
# email view (as above) and then configure properties on a per-module
# basis (e.g. project1 is sent to project1@example.com).

[all]
views = email, aim, msn
email.to = list@example.com, person@example.com

aim.screenname =
aim.password =
aim.to =

msn.passport =
msn.password =
msn.to =


#####################################################################
#
# Misc
#
# The userMap section maps CVS/SVN usernames to email addresses from
# use in the from field of commit emails. For example,
#
[userMap]
mysvnusername = me@example.com
yoursvnusername = you@yourexample.com


